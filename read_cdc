#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May  1 16:48:22 2022

@author: irvinggonzalez
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

import geopandas as gpd

#%% Load neurological data

raw = pd.read_csv("Underlying Cause of Death, 1999-2020.txt", sep="\t")

print(len(raw))

print(raw["Notes"])

has_note = raw["Notes"].isna()==False

neuro = raw[has_note==False]

neuro = raw.drop(columns="Notes")

neuro = neuro.dropna(subset="Year")

print(len(neuro))

#%% Load epilepsy data

epilepsy = pd.read_csv("Underlying Cause of Death, 1999-2020 Epilepsy.txt", sep="\t")

print(len(epilepsy))

print(epilepsy["Notes"])

has_notes = epilepsy["Notes"].isna()==False

epi = epilepsy.drop(columns="Notes")

epi = epi.dropna(subset="Year")

print(len(epi))


#%% Redefine columns

new_columns_neuro = {"State Code": "State Code",
                     "Year Code":"neuro_year_code", 
                     "Crude Rate": "neuro_crude_rate"
                     ,"Population":"neuro_pop",
                     "Deaths":"neuro_deaths"
                     }
neuro = neuro.rename(columns=new_columns_neuro)

new_columns_epi = {"State Code":"epi_state_code",
                     "Year Code":"epi_year_code", 
                     "Crude Rate": "epi_crude_rate"
                     ,"Population":"epi_pop",
                     "Deaths":"epi_deaths"
                     }
epi = epi.rename(columns=new_columns_epi)


#%% Merge neuro and epi datasets, then drop columns

neuro_epi = neuro.merge(epi, 
                             on=["State", "Year"], how="left", 
                             validate="1:1", indicator=True)

neuro_epi = neuro_epi.drop(columns="epi_crude_rate")
neuro_epi = neuro_epi.drop(columns="neuro_crude_rate")
neuro_epi = neuro_epi.drop(columns="epi_state_code")


#%% Compute death rate for neuro and epi deaths in each state

neuro_epi['neuro_death_rate'] = neuro_epi['neuro_deaths']/neuro_epi['neuro_pop'] * 1000000
print(neuro_epi['neuro_death_rate'].sum())

neuro_epi['epi_death_rate'] = neuro_epi['epi_deaths']/neuro_epi['epi_pop'] * 1000000
print(neuro_epi['epi_death_rate'].sum())

#%% Compute neuro to epi death ratio for each state

neuro_epi['epi_to_neuro_ratio'] = neuro_epi['epi_death_rate']/neuro_epi['neuro_death_rate'] * 100
print(neuro_epi['epi_to_neuro_ratio'].sum())

#%% Grouping and averaging neuro and epi death rates

grouped = neuro_epi.groupby("State")

average = grouped[["neuro_death_rate","epi_death_rate"]].mean()

average["neuro_death_rate"].plot.barh()

average["epi_death_rate"].plot.barh()

average.plot.scatter(x="neuro_death_rate",y="epi_death_rate")

#%% Visualize: Compare neuro death rate to epi death rate

neuro_epi["neuro_death_rate"] = neuro_epi["neuro_death_rate"].astype(int)
neuro_epi["epi_death_rate"] = neuro_epi["epi_death_rate"].astype(int)

# Scatter epi death rate against neuro death rate

(fig, ax1) = plt.subplots()
neuro_epi.lineplot(data=trim, x="nameplate", hue="third_party", palette="crest", fill=True, ax=ax1)
ax1.set_title("Neurological Death Rate by State")
ax1.set_xlabel("")
fig.tight_layout()

fig.savefig("neuro_death_rate.png")

(fig, ax1) = plt.subplots()
neuro_epi.lineplot(data=trim, x="nameplate", hue="third_party", palette="crest", fill=True, ax=ax1)
ax1.set_title("Epilepsy Death Rate by State")
ax1.set_xlabel("")
fig.tight_layout()

fig.savefig("epi_death_rate.png")

#%% Visualize: Compare neuro death rate with death ratio


#%% Visualize: Compare epi death rate with death ratio


#%% Merge neuro_epi data onto geographic data using state code as join key


#%% Project and plot  











